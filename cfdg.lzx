<canvas title="CFDG" proxied="false" layout="axis: y">
  <script src="model.js"/>
  <script src="parser.js"/>
  <script src="graphics.js"/>
  <script src="drawing.js"/>
  <include href="incubator/roundrectbutton.lzx"/>
  <include href="incubator/scrolledittext.lzx"/>
  <include href="scaleview.lzx"/>
  <include href="gallery.lzx"/>
  <splash/>
  
  <node id="appstate">
    <attribute name="rendering" value="false"/>
    <attribute name="loading" value="false"/>
    <attribute name="user_id" value="null"/>
  </node>
  
  <node id="document">
    <attribute name="doc_name" type="string" value=""/>
    <attribute name="doc_id" value="null"/>
    <attribute name="user_id" value="null"/>
  </node>
  
  <hbox width="100%" height="20" spacing="10">
    <view>
      <roundrectbutton height="20" onclick="render()" visible="${!appstate.rendering}">Draw</roundrectbutton>
      <roundrectbutton height="20" onclick="stopRendering()" visible="${appstate.rendering}">Stop</roundrectbutton>
    </view>
    <roundrectbutton height="20" onclick="loadDialog.show()">Gallery</roundrectbutton>
    <roundrectbutton height="20" visible="${!document.user_id || document.user_id == appstate.user_id}"
		     onclick="saveDialog.setAttribute('visible', true)">Save</roundrectbutton>
    <roundrectbutton height="20" visible="${document.doc_id}"
		     onclick="saveDialog.setAttribute('visible', true)">Save as...</roundrectbutton>
  </hbox>
  
  <text width="100%" height="20" id="statusField"/>
  <hbox width="100%" height="${parent.height-40}">
    <view width="30%" height="100%">
      <scrolledittext id="sourceField" width="100%" height="200%" multiline="true">
        <pre><include href="miles.cfdg" type="text"/></pre>
      </scrolledittext>
    </view>
    <view id="maskText" visible="${appstate.loading}"
          bgcolor="white" opacity="0.5" clickable="true"
          x="${sourceField.x}" y="${sourceField.y}"
          width="${sourceField.width}" height="${sourceField.height}"
          options="ignorelayout">
      <text align="center" y="33%" fontsize="24">Loading</text>
    </view>
    <view width="2.5%"/>
    <view width="65%" height="95%">
      <scaleview width="${Math.min(parent.width, parent.height)}"
                 height="${this.width}"/>
    </view>
  </hbox>
  
  <script><![CDATA[
    function info(s) {Debug.write.call(Debug, arguments)}
    function warn(s) {Debug.write.call(Debug, arguments)}
    function error(s) {Debug.write.call(Debug, arguments)}
    var shapeCount;
    
    var HalfUnitCircle = (new Transform()).prescale(.5,.5).
      transformPoints(makeQuadraticCircle());
    Graphics.prototype.drawPolygon = function (pts) {
      shapeCount += 1;
      dv.drawPath(pts);
    };
    Graphics.prototype.drawCircle = function (center, radius, transform) {
      shapeCount += 1;
      var pts = transform.transformPoints(HalfUnitCircle);
      dv.drawCurve(pts)
    };
    Graphics.prototype.setRGB = function (rgb) {
      var r = Math.floor(255*rgb[0]);
      var g = Math.floor(255*rgb[1]);
      var b = Math.floor(255*rgb[2]);
      dv.fillStyle = (r<<16)+(g<<8)+b;
    };
    var currentContext = null;
    function render() {
      dv.reset();
      shapeCount = 0;
      var t0 = (new Date).getTime();
      var m = new Model;
      var err = lex(sourceField.getText(), new Parser(new Builder(m)));
      if (err) {
        var msg = "syntax error at \'" + err.token + "\' on line " + err.lineno + ": " + err.message;
        statusField.setText(msg);
        return;
      }
      var cxt = new Context(m);
      var tm = cxt.transform.m;
      tm[0][0] = tm[1][1] = 20;
      tm[1][1] *= -1;
      cxt.stats.cutoff *= Math.abs(tm[0][0] * tm[1][1])/5;
      //Debug.write((new Date).getTime()-t0);
      t0 = (new Date).getTime();
      m.draw(cxt);
      dv.resetBounds();      
      dv.endFrame();
      var t1 = (new Date).getTime();
      appstate.setAttribute('rendering', {context: cxt, startTime: t0, lastBlit: t0});
    }
  ]]></script>
  <method event="onidle" reference="LzIdle">
    if (!appstate.rendering) return;
    var currentContext = appstate.rendering;
    var cxt = currentContext.context;
    cxt.stats.countdown = 10;
    cxt.flush(50);
    var t0 = currentContext.startTime;
    var t1 = (new Date).getTime();
    if (t1-currentContext.lastBlit > 10000) {
      dv.endFrame();
      currentContext.lastBlit = t1;
    }
    dv.resetBounds();
    var msg = "Rendered " + shapeCount + " shapes in " + Math.round((t1-t0)/1000) + "s.";
    if (cxt.queue.length)
      msg += "  " + cxt.queue.length + " expansions remaining."
    statusField.setText(msg);
    if (!cxt.queue.length) stopRendering(true);
  </method>
  <script><![CDATA[
    function stopRendering(done) {
      if (!appstate.rendering) return;
      var currentContext = appstate.rendering;
      dv.endFrame();
      if (!done)
        statusField.setText("<font color='#ff0000'>Stopped rendering</font> at " + shapeCount + " shapes after " + Math.round(((new Date).getTime() - currentContext.startTime)/1000) + "s, with " + currentContext.context.queue.length + " expansions remaining.");
      appstate.setAttribute('rendering', false);
    }
    if (_root['server'] == undefined) server = 'http://localhost:3000';
    if (server == 'remote') server = 'http://make-a-tree.com';
  ]]></script>
</canvas>