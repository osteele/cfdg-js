<canvas title="CFDG" proxied="false" layout="axis: y">
  <include href="incubator/roundrectbutton.lzx"/>
  <include href="scaleview.lzx"/>
  <script src="model.js"/>
  <script src="parser.js"/>
  <script src="graphics.js"/>
  <script src="drawing.js"/>
  
  <node id="appstate">
    <attribute name="rendering" value="false"/>
    <attribute name="loading" value="false"/>
    <attribute name="gallery" value="false"/>
  </node>
  
  <hbox width="100%" height="20">
    <view>
      <roundrectbutton height="20" onclick="render()" visible="${!appstate.rendering}">Draw</roundrectbutton>
      <roundrectbutton height="20" onclick="stopRendering()" visible="${appstate.rendering}">Stop</roundrectbutton>
    </view>
    <roundrectbutton height="20" onclick="loadDialog.show()">Open</roundrectbutton>
    <roundrectbutton height="20" onclick="saveDialog.setAttribute('visible', true)">Save</roundrectbutton>
  </hbox>
  
  <text width="100%" height="20" id="statusField"/>
  <hbox width="100%" height="${parent.height-40}">
    <view width="30%" height="100%">
      <inputtext id="sourceField" width="100%" height="200%" multiline="true">
        <pre><include href="miles.cfdg" type="text"/></pre>
      </inputtext>
      <scrollbar/>
    </view>
    <view id="maskText" visible="${appstate.loading}"
          bgcolor="white" opacity="0.5" clickable="true"
          x="${sourceField.x}" y="${sourceField.y}"
          width="${sourceField.width}" height="${sourceField.height}"
          options="ignorelayout">
      <text align="center" y="33%" fontsize="24">Loading</text>
    </view>
    <view width="2.5%"/>
    <view width="65%" height="95%">
      <scaleview width="${Math.min(parent.width, parent.height)}"
                 height="${this.width}"/>
    </view>
  </hbox>
  
  <dataset name="filelistdata"
           ondata="appstate.setAttribute('gallery', true)"/>
  <dataset name="fileloaddata"
           ondata="Debug.write('ondata');
                   sourceField.setText(fileloaddata.data.childNodes[0].data);
                   appstate.setAttribute('loading', false);"
           onerror="Debug.write('onerror');
                    appstate.setAttribute('loading', false);"
           ontimeout="Debug.write('onerror');
                    appstate.setAttribute('loading', false);"/>
  <window id="loadDialog" title="Open..."
          visible="false" closeable="true"
          options="ignorelayout" width="200">
    <method name="show">
      setAttribute('visible', true);
      filelistdata.setSrc(server + "/document/list");
      filelistdata.doRequest();
    </method>
    <text visible="${!appstate.gallery}">Loading gallery...</text>
    <view height="150">
      <vbox datapath="filelistdata:/documents">
        <roundrectbutton datapath="document" height="20" text="$path{'@name'}">
          <method event="onclick">
            fileloaddata.setSrc(server + '/document/show/' + this.xid);
            fileloaddata.timeout = 5000;
            fileloaddata.doRequest();
            loadDialog.setAttribute('visible', false);
            appstate.setAttribute('loading', true);
            fileloaddata.data = null;
          </method>
          <attribute name="xid" value="$path{'@id'}"/>
        </roundrectbutton>
      </vbox>
    </view>
  
  </window>
  <dataset name="filesaveds"
           ondata="statusField.setText(filesaveds.data)"/>
  <window id="saveDialog" title="Save"
          visible="false"
          options="ignorelayout" layout="axis: y">
    <hbox>
      <text>Name: </text>
      <edittext id="nameField" width="140"/>
    </hbox>
    <hbox>
      <roundrectbutton height="20" text="Save">
        <method event="onclick">
          filesaveds.setSrc(server + '/document/save');
          filesaveds.setQueryType('POST');
          filesaveds.setQueryParam('name', nameField.getText());
          filesaveds.setQueryParam('content', sourceField.getText());
          filesaveds.doRequest();
          saveDialog.setVisible(false);
        </method>
      </roundrectbutton>
      <roundrectbutton height="20" onclick="saveDialog.setVisible(false)">
        Cancel
      </roundrectbutton>
    </hbox>
  </window>
  
  <script><![CDATA[
    function print(s) {Debug.write.call(Debug, arguments)}
    var shapeCount;
    Graphics.prototype.drawPath = function (msg, pts, curve) {
      //Debug.write(msg, pts);
      if (curve) dv.drawCurve(pts); else dv.drawPath(pts);
      shapeCount += 1;
    };
    Graphics.prototype.setHsv = function (h, s, v) {
      var lastHsv = dv.lastHsv;
      if (lastHsv[0] == h && lastHsv[1] == s && lastHsv[2] == v) return;
      dv.lastHsv = [h, s, v];
      var c = Math.floor(255 * v);
      dv.fillStyle = 0x010101 * c;
      if (s == 0) return;
      h = h / 60.0; // sector 0 to 5
      var i = Math.floor(h);
      var f = h - i;
      var p = v * (1 - s);
      var q = v * (1 - s * f);
      var t = v * (1 - s * (1 - f));
      var rgb = [[v,t,p],[q,v,p],[p,v,t],[p,q,v],[t,p,v],[v,p,q]][i % 6];
      var r = Math.floor(255*rgb[0]);
      var g = Math.floor(255*rgb[1]);
      var b = Math.floor(255*rgb[2]);
      dv.fillStyle = (r<<16)+(g<<8)+b;
    }
    var currentContext = null;
    function render() {
      dv.reset();
      shapeCount = 0;
      var t0 = (new Date).getTime();
      var m = new Model;
      var err = lex(sourceField.getText(), new Parser(new Builder(m)));
      if (err) {
        var msg = "syntax error at \'" + err.token + "\' on line " + err.lineno + ": " + err.message;
        statusField.setText(msg);
        return;
      }
      var cxt = new Context(m);
      var tm = cxt.transform.m;
      tm[0][0] = tm[1][1] = 20;
      tm[1][1] *= -1;
      cxt.stats.cutoff *= Math.abs(tm[0][0] * tm[1][1]);
      //Debug.write((new Date).getTime()-t0);
      t0 = (new Date).getTime();
      m.draw(cxt);
      dv.resetBounds();      
      dv.endFrame();
      var t1 = (new Date).getTime();
      appstate.setAttribute('rendering', {context: cxt, startTime: t0, lastBlit: t0});
    }
  ]]></script>
  <method event="onidle" reference="LzIdle">
    if (!appstate.rendering) return;
    var currentContext = appstate.rendering;
    var cxt = currentContext.context;
    cxt.stats.countdown = 10;
    cxt.flush(50);
    var t0 = currentContext.startTime;
    var t1 = (new Date).getTime();
    if (t1-currentContext.lastBlit > 10000) {
      dv.endFrame();
      currentContext.lastBlit = t1;
    }
    dv.resetBounds();
    var msg = "Rendered " + shapeCount + " shapes in " + Math.round((t1-t0)/1000) + "s.";
    if (cxt.queue.length)
      msg += "  " + cxt.queue.length + " expansions remaining."
    statusField.setText(msg);
    if (!cxt.queue.length) stopRendering(true);
  </method>
  <method event="onidle" reference="LzIdle"><![CDATA[
    if (!appstate.loading) return;
    if (!fileloaddata.data) return;
    var s = '';
    var lines = fileloaddata.data.childNodes[0].data.split("\n");
    for (var i = 0; i < lines.length; i++)
      s += lines[i];
    sourceField.setText(s);
    appstate.setAttribute('loading', false);
  ]]></method>
  <script><![CDATA[
    function stopRendering(done) {
      if (!appstate.rendering) return;
      var currentContext = appstate.rendering;
      dv.endFrame();
      if (!done)
        statusField.setText("<font color='#ff0000'>Stopped rendering</font> at " + shapeCount + " shapes after " + Math.round(((new Date).getTime() - currentContext.startTime)/1000) + "s, with " + currentContext.context.queue.length + " expansions remaining.");
      appstate.setAttribute('rendering', false);
    }
    if (_root['server'] == undefined) server = 'http://localhost:3000';
    if (server == 'remote') server = 'http://make-a-tree.com';
  ]]></script>
</canvas>