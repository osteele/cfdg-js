<canvas title="CFDG" layout="axis: y">
  <include href="incubator/roundrectbutton.lzx"/>
  <script src="model.js"/>
  <script src="parser.js"/>
  <script src="graphics.js"/>
  <script src="drawing.js"/>
  
  <dataset name="ds" ondata="ds.data &amp;&amp; ds.data.childNodes[0].data"/>
  
  <hbox width="100%" height="20">
    <view>
      <roundrectbutton height="20" onclick="render()" visible="${!appstate.rendering}">Render</roundrectbutton>
      <roundrectbutton height="20" onclick="stopRendering()" visible="${appstate.rendering}">Stop</roundrectbutton>
    </view>
    <!--roundrectbutton height="20" onclick="statusField.setText(parse(sourceField.getText()))">Parse</roundrectbutton-->
    <!--roundrectbutton height="20" onclick="ds.setSrc('http:simple.cfdgx'); ds.doRequest(); sourceField.setText(ds.data.childNodes[0].data);">Load</roundrectbutton-->
  </hbox>
  <text width="100%" height="20" id="statusField"/>
  <hbox width="100%" height="${parent.height-40}">
  <edittext width="30%" height="100%" id="sourceField"
            multiline="true">
    <pre><include href="miles.cfdg" type="text"/></pre>
  </edittext>
  <view width="70%" height="100%" opacity="1.0">
    <view stretches="both">
    <drawview id="dv">
      <!--  width="100%" height="100%" stretches="both" -->
      <method name="reset">
        clear();
        this.xmin = this.ymin = Infinity;
        this.xmax = this.ymax = -Infinity;
        this.fillStyle = 0;
        this.lastHsv = [nil, nil, nil];
      </method>
      <method name="setBounds" args="xmin, ymin, xmax, ymax"><![CDATA[
        if (xmin == this.xmin && ymin == this.ymin &&
            xmax == this.xmax && ymax == this.ymax) return;
        //Debug.write('bounds', xmin, ymin, xmax, ymax);
        this.xmin = xmin; this.ymin = ymin;
        this.xmax = xmax; this.ymax = ymax;
        var max = Math.max(xmax-xmin, ymax-ymin);
        //max = xmax-xmin;
        //Debug.write(xmin, xmax, max);
        parent.setAttribute('unstretchedwidth', max);
        parent.setAttribute('width', parent.parent.width);
        parent.setAttribute('x', -xmin/max*parent.width);
        parent.setAttribute('unstretchedheight', max);
        parent.setAttribute('height', parent.parent.height);
        parent.setAttribute('y', -ymin/max*parent.height);
      ]]></method>
      <method name="resetBounds">
        var xmin = this.xmin;
        this.xmin = 'reset';
        this.setBounds(xmin, this.ymin, this.xmax, this.ymax);
      </method>
      <method name="drawPath" args="pts"><![CDATA[
        beginPath();
        var x = pts[0][0];
        var y = pts[0][1];
        var xmin = Math.min(x, this.xmin);
        var ymin = Math.min(y, this.ymin);
        var xmax = Math.max(x, this.xmax);
        var ymax = Math.max(y, this.ymax);
        moveTo(x, y);
        for (var i = 1; i < pts.length; i++) {
          var x = pts[i][0], y = pts[i][1];
          lineTo(x, y);
          xmin = Math.min(xmin, x);
          ymin = Math.min(ymin, y);
          xmax = Math.max(xmax, x);
          ymax = Math.max(ymax, y);
        }
        fill();
        this.setBounds(xmin, ymin, xmax, ymax);
      ]]></method>
      <method name="drawCurve" args="pts"><![CDATA[
        beginPath();
        var x = pts[0][0];
        var y = pts[0][1];
        var xmin = Math.min(x, this.xmin);
        var ymin = Math.min(y, this.ymin);
        var xmax = Math.max(x, this.xmax);
        var ymax = Math.max(y, this.ymax);
        moveTo(x, y);
        for (var i = 1; i < pts.length; i+=2) {
          var cx = pts[i][0], cy = pts[i][1];
          var x = pts[i+1][0], y = pts[i+1][1];
          // Flash max is dyadic :-(
          xmin = Math.min(xmin, Math.min(cx, x));
          ymin = Math.min(ymin, Math.min(cy, y));
          xmax = Math.max(xmax, Math.max(cx, x));
          ymax = Math.max(ymax, Math.max(cy, y));
          quadraticCurveTo(cx, cy, x, y);
        }
        fill();
        this.setBounds(xmin, ymin, xmax, ymax);
      ]]></method>
    </drawview>
    </view>
  </view>
  </hbox>
  
  <node id="appstate">
    <attribute name="rendering" value="false"/>
  </node>
  
  <script><![CDATA[
    function print(s) {Debug.write.call(Debug, arguments)}
    var shapeCount;
    Graphics.prototype.drawPath = function (msg, pts, curve) {
      //Debug.write(msg, pts);
      if (curve) dv.drawCurve(pts); else dv.drawPath(pts);
      shapeCount += 1;
    };
    Graphics.prototype.setHsv = function (h, s, v) {
      var lastHsv = dv.lastHsv;
      if (lastHsv[0] == h && lastHsv[1] == s && lastHsv[2] == v) return;
      dv.lastHsv = [h, s, v];
      var c = Math.floor(255 * v);
      dv.fillStyle = 0x010101 * c;
      if (s == 0) return;
      h = h / 60.0; // sector 0 to 5
      var i = Math.floor(h);
      var f = h - i;
      var p = v * (1 - s);
      var q = v * (1 - s * f);
      var t = v * (1 - s * (1 - f));
      var rgb = [[v,t,p],[q,v,p],[p,v,t],[p,q,v],[t,p,v],[v,p,q]][i % 6];
      var r = Math.floor(255*rgb[0]);
      var g = Math.floor(255*rgb[1]);
      var b = Math.floor(255*rgb[2]);
      dv.fillStyle = (r<<16)+(g<<8)+b;
    }
    var currentContext = null;
    function render() {
      dv.reset();
      shapeCount = 0;
      var t0 = (new Date).getTime();
      var m = new Model;
      var err = lex(sourceField.getText(), new Parser(new Builder(m)));
      if (err) {
        var msg = "syntax error at \'" + err.token + "\' on line " + err.lineno + ": " + err.message;
        statusField.setText(msg);
        return;
      }
      var cxt = new Context(m);
      var tm = cxt.transform.m;
      tm[0][0] = tm[1][1] = 20;
      tm[1][1] *= -1
      //Debug.write((new Date).getTime()-t0);
      t0 = (new Date).getTime();
      m.draw(cxt);
      currentContext = {context: cxt, startTime: t0};
      dv.resetBounds();
      var t1 = (new Date).getTime();
      statusField.setText("Rendered " + shapeCount + " shapes in " + (t1-t0) + "ms.");
      appstate.setAttribute('rendering', true);
    }
  ]]></script>
  <method event="onidle" reference="LzIdle">
    if (currentContext) {
      var cxt = currentContext.context;
      cxt.stats.countdown = 25;
      cxt.flush();
      dv.resetBounds();
      var t0 = currentContext.startTime;
      var t1 = (new Date).getTime();
      var msg = "Rendered " + shapeCount + " shapes in " + Math.round((t1-t0)/1000) + "s.";
      if (cxt.queue.length)
        msg += "  " + cxt.queue.length + " expansions remaining."
      statusField.setText(msg);
      if (!cxt.queue.length) {
        appstate.setAttribute('rendering', false);
        currentContext = nil;
      }
    }
  </method>
  <script>
    function stopRendering() {
      if (currentContext) {
        statusField.setText("Stopped at " + shapeCount + " shapes after " + Math.round(((new Date).getTime() - currentContext.startTime)/1000) + "s, with " + currentContext.context.queue.length + " expansions remaining.");
        appstate.setAttribute('rendering', false);
        currentContext = nil;
      }
    }
  </script>
</canvas>