 <canvas layout="axis: y">
  <script src="model.js"/>
  <script src="parser.js"/>
  <script src="drawing.js"/>
  
  <hbox width="100%" height="20">
    <button onclick="doit()">Render</button>
    <button onclick="errorField.setText(parse(sourceField.getText()))">Parse</button>
  </hbox>
  <text width="100%" height="20" id="errorField"/>
  <hbox width="100%" height="${parent.height-40}">
  <edittext width="30%" height="100%" id="sourceField"
            multiline="true">
    <pre><include href="sample.cfdg" type="text"/></pre>
  </edittext>
  <view width="70%" height="100%">
    <drawview id="dv" width="100%" height="100%">
      <method name="reset">
        clear();
        this.xmax = 1;
        this.ymax = 1;
      </method>
      <method name="drawPath" args="pts"><![CDATA[
        beginPath();
        moveTo(pts[0][0], pts[0][1]);
        for (var i = 1; i < pts.length; i++) {
          var x = pts[i][0], y = pts[i][1];
          lineTo(x, y);
          this.xmax = Math.max(this.xmax, x);
          this.ymax = Math.max(this.ymax, y);
        }
        fill();
        var s = Math.min(this.parent.width / this.xmax, this.parent.height / this.ymax);
        print(this.parent.width, this.parent.height, this.xmax, this.ymax);
        this.setAttribute('xscale', s);
        this.setAttribute('yscale', s);
      ]]></method>
      <method name="drawCurve" args="pts"><![CDATA[
        beginPath();
        moveTo(pts[0][0], pts[0][1]);
        for (var i = 1; i < pts.length; i+=2) {
          var cx = pts[i][0], cy = pts[i][1];
          var x = pts[i+1][0], y = pts[i+1][1];
          this.xmax = Math.max(this.xmax, cx);
          this.ymax = Math.max(this.ymax, cy);
          this.xmax = Math.max(this.xmax, x);
          this.ymax = Math.max(this.ymax, y);
          quadraticCurveTo(cx, cy, x, y);
        }
        var s = Math.min(this.parent.width / this.xmax, this.parent.height / this.ymax);
        this.setAttribute('xscale', s);
        this.setAttribute('yscale', s);
      ]]></method>
    </drawview>
  </view>
  </hbox>
  
  <script>
    function print(s) {Debug.write.call(Debug, arguments)}
    Context.prototype.path = function (msg, pts, curve) {
      Debug.write(msg, pts);
      dv.drawCurve(pts);
      //if (curve) dv.drawCurve(pts); else dv.drawPath(pts);
    };
    function doit() {
      dv.reset();
      var msg = draw(sourceField.getText());
      errorField.setText(msg||'')
    }
  </script>
  
  <script>
    doit();
  </script>
</canvas>