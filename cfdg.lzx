<canvas layout="axis: y">
  <include href="incubator/roundrectbutton.lzx"/>
  <script src="model.js"/>
  <script src="parser.js"/>
  <script src="drawing.js"/>
  
  <dataset name="ds" ondata="Debug.write(ds.data.childNodes[0].data)"/>
  
  <hbox width="100%" height="20">
    <roundrectbutton height="20" onclick="doit()">Render</roundrectbutton>
    <roundrectbutton height="20" onclick="dv.resetBounds()">Bounds</roundrectbutton>
    <roundrectbutton height="20" onclick="errorField.setText(parse(sourceField.getText()))">Parse</roundrectbutton>
    <roundrectbutton height="20" onclick="Debug.write('fetch'); ds.setSrc('http:simple.cfdgx'); ds.doRequest(); sourceField.setText(ds.data.childNodes[0].data);">Load</roundrectbutton>
  </hbox>
  <text width="100%" height="20" id="errorField"/>
  <hbox width="100%" height="${parent.height-40}">
  <edittext width="30%" height="100%" id="sourceField"
            multiline="true">
    <pre><include href="triangle.cfdg" type="text"/></pre>
  </edittext>
  <view width="70%" height="100%" opacity="0.5">
    <view stretches="both">
    <drawview id="dv">
      <!--  width="100%" height="100%" stretches="both" -->
      <method name="reset">
        clear();
        this.xmin = this.ymin = Infinity;
        this.xmax = this.ymax = -Infinity;
        this.fillStyle = 0;
      </method>
      <method name="setBounds" args="xmin, ymin, xmax, ymax"><![CDATA[
        if (xmin == this.xmin && ymin == this.ymin &&
            xmax == this.xmax && ymax == this.ymax) return;
        Debug.write('bounds', xmin, ymin, xmax, ymax);
        this.xmin = xmin; this.ymin = ymin;
        this.xmax = xmax; this.ymax = ymax;
        var max = Math.max(xmax-xmin, ymax-ymin);
        max = xmax-xmin;
        //Debug.write(xmin, xmax, max);
        parent.setAttribute('unstretchedwidth', max);
        parent.setAttribute('width', parent.parent.width);
        parent.setAttribute('x', -xmin/max*parent.width);
        parent.setAttribute('unstretchedheight', max);
        parent.setAttribute('height', parent.parent.height);
        return;
        var max = Math.max(xmax-xmin, ymax-ymin);
        Debug.write(xmin, this.width, max, -xmin*this.width/max);
        parent.setAttribute('x', -xmin*this.width/max);
        parent.setAttribute('y', -ymin*this.height/max);
        this.setAttribute('unstretchedwidth', max);
        this.setAttribute('unstretchedheight', max);
        this.setAttribute('width', parent.width);
        this.setAttribute('height', parent.height);
      ]]></method>
      <method name="resetBounds">
        var xmin = this.xmin;
        this.xmin = 'reset';
        this.setBounds(xmin, this.ymin, this.xmax, this.ymax);
      </method>
      <method name="drawPath" args="pts"><![CDATA[
        beginPath();
        var x = pts[0][0];
        var y = pts[0][1];
        var xmin = Math.min(x, this.xmin);
        var ymin = Math.min(y, this.ymin);
        var xmax = Math.max(x, this.xmax);
        var ymax = Math.max(y, this.ymax);
        moveTo(x, y);
        for (var i = 1; i < pts.length; i++) {
          var x = pts[i][0], y = pts[i][1];
          lineTo(x, y);
          xmin = Math.min(xmin, x);
          ymin = Math.min(ymin, y);
          xmax = Math.max(xmax, x);
          ymax = Math.max(ymax, y);
        }
        fill();
        this.setBounds(xmin, ymin, xmax, ymax);
      ]]></method>
      <method name="drawCurve" args="pts"><![CDATA[
        beginPath();
        var x = pts[0][0];
        var y = pts[0][1];
        var xmin = Math.min(x, this.xmin);
        var ymin = Math.min(y, this.ymin);
        var xmax = Math.max(x, this.xmax);
        var ymax = Math.max(y, this.ymax);
        moveTo(x, y);
        for (var i = 1; i < pts.length; i+=2) {
          var cx = pts[i][0], cy = pts[i][1];
          var x = pts[i+1][0], y = pts[i+1][1];
          // Flash max is dyadic :-(
          xmin = Math.min(xmin, Math.min(cx, x));
          ymin = Math.min(ymin, Math.min(cy, y));
          xmax = Math.max(xmax, Math.max(cx, x));
          ymax = Math.max(ymax, Math.max(cy, y));
          quadraticCurveTo(cx, cy, x, y);
        }
        fill();
        this.setBounds(xmin, ymin, xmax, ymax);
      ]]></method>
    </drawview>
    </view>
  </view>
  </hbox>
  
  <script>
    function print(s) {Debug.write.call(Debug, arguments)}
    Graphics.prototype.drawPath = function (msg, pts, curve) {
      Debug.write(msg, pts);
      if (curve) dv.drawCurve(pts); else dv.drawPath(pts);
    };
    Graphics.prototype.setHsv = function (h, s, v) {
      var c = Math.floor(255 * v);
      dv.fillStyle = 0x010101 * c;
    }
    function doit() {
      dv.reset();
      var msg = draw(sourceField.getText());
      if (msg) msg = "syntax error at \'" + err.token + "\' on line " + err.lineno + ": " + err.message;
      errorField.setText(msg);
      dv.resetBounds();
      return;
      dv.beginPath();
      dv.fillStyle = 0xff0000;
      dv.oval(0, 0, dv.unstretchedheight/10, dv.unstretchedwidth/10);
      dv.fill();
      /*dv.beginPath();
      dv.strokeStyle = 0xff0000;
      dv.moveTo(0, -100); dv.lineTo(0, 100);
      dv.moveTo(-100, 0); dv.lineTo(100, 0);
      dv.stroke();*/
      errorField.setText(msg||'')
    }
  </script>
  
  <script>
    doit();
  </script>
</canvas>